<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Mauricio Soares</title>
    <link>http://mauriciosoares.co/blog</link>
    <description>Front End Developer</description>
    <pubDate>Fri, 02 Jan 2015 21:00:00 -0200</pubDate>
    <item>
      <title>Melhorando o callback hell</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/melhorando-o-callback-hell.html</link>
      <description>&lt;p&gt;Como eu melhorei o processo de ajax dinâmicos&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 21:00:00 -0200</pubDate>
      <dc:date>2015-01-02T21:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Design pattern Facade</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/design-pattern-facade.html</link>
      <description>&lt;p&gt;Existem muitos patterns para javascript, e hoje falarei umpouco sobre Facade.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 20:00:00 -0200</pubDate>
      <dc:date>2015-01-02T20:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Uma palinha sobre Backbone - sem código</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/uma-palinha-sobre-backbone.html</link>
      <description>&lt;p&gt;Fala galera, passei um tempo sem escrever aqui no blog pois estava trabalhando em um projeto pessoal bem bacana, e provavelmente a frequência de posts novos ira diminuir umpouco (um por dia estava meio puxado hahaha).&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 19:00:00 -0200</pubDate>
      <dc:date>2015-01-02T19:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Hoisting?</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/hoisting.html</link>
      <description>&lt;p&gt;Um comportamento normal do Javascript que pode causar muita confusão na hora que você está desenvolvendo sua aplicação é o &lt;strong&gt;Hoisting&lt;/strong&gt;.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 18:00:00 -0200</pubDate>
      <dc:date>2015-01-02T18:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Bind crossbrowser</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/bind-crossbrowser.html</link>
      <description>&lt;p&gt;Em um dos posts anteriores falamos sobre o &lt;a href=&quot;http://blog.herebecoders.com/js-bind-em-callbacks/&quot;&gt;bind&lt;/a&gt;, e quão útil ele pode ser em nossa aplicação... Mas infelizmente o &lt;code&gt;bind&lt;/code&gt; é uma feature do Ecmascript 5, e sua compatibilidade com o IE é a partir do 9 (e todos sabemos que o cliente sempre quer apps que funcionem no IE 8 e muitas vezes no IE 7).&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 17:00:00 -0200</pubDate>
      <dc:date>2015-01-02T17:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Combinando Objetos com Mixins</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/combinando-objetos-com-mixins.html</link>
      <description>&lt;p&gt;Uma maneira interessante de combinar um número indefinido de objetos é usando um método chamado &lt;code&gt;mixin&lt;/code&gt;.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 16:00:00 -0200</pubDate>
      <dc:date>2015-01-02T16:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Método extend</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/metodo-extend.html</link>
      <description>&lt;p&gt;A alguns posts atras, nós falamos que objetos são &lt;a href=&quot;http://blog.herebecoders.com/js-objetos-por-referencia/&quot;&gt;passados por referência&lt;/a&gt;, e descobrimos que quando atribuimos um objeto a outra variável, ele é somente uma referência deste primeiro objeto, e tudo que for alterado no primeiro, será alterado no segundo também.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 15:00:00 -0200</pubDate>
      <dc:date>2015-01-02T15:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Método Method</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/metodo-method.html</link>
      <description>&lt;p&gt;Como falamos &lt;a href=&quot;http://blog.herebecoders.com/js-prototypes/&quot;&gt;anteriormente&lt;/a&gt;, &lt;code&gt;prototypes&lt;/code&gt; são usados para declararmos metodos e propriedades reutilizáveis em todas as instancias de uma função construtora no Javascript, a sintaxe é a seguinte:&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 14:00:00 -0200</pubDate>
      <dc:date>2015-01-02T14:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Grunt, baby steps, parte 2</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/grunt-baby-steps-parte-2.html</link>
      <description>&lt;p&gt;Falamos no &lt;a href=&quot;http://blog.herebecoders.com/js-grunt-baby-steps-parte-1/&quot;&gt;post anterior&lt;/a&gt; sobre como instalarmos o Grunt em nossa máquina, agora que passamos por todo aquele processo vamos agora configura-lo e coloca-lo em ação!&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 13:00:00 -0200</pubDate>
      <dc:date>2015-01-02T13:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Grunt, baby steps, parte 1</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/grunt-baby-steps-parte-1.html</link>
      <description>&lt;p&gt;Antes de mais nada, infelizmente terei que deixar usuários de Windows um pouco na mão nesse post, esse post é destinado mais para usuários de Linux/Mac, pois vai involver o Terminal. Mas tentarei deixar referências para pelo menos guia-los como fazer os procedimentos no Windows. Sempre que eu involver o &lt;strong&gt;terminal&lt;/strong&gt;, no Windows será equivalente ao &lt;strong&gt;CMD&lt;/strong&gt;.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 12:00:00 -0200</pubDate>
      <dc:date>2015-01-02T12:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Dicas sobre Javascript</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/dicas-sobre-javascript.html</link>
      <description>&lt;p&gt;Nesse Post vou colocar algumas dicas sobre Javascript, vou atualizar este post conforme vou me lembrando (ou conhecendo) dicas novas que possam ajudar no seu dia a dia.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 12:00:00 -0200</pubDate>
      <dc:date>2015-01-02T12:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Bind em callbacks</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/bind-em-callbacks.html</link>
      <description>&lt;p&gt;Recentemente falamos sobre o &lt;a href=&quot;http://blog.herebecoders.com/js-this-em-funcoes-e-construtores/&quot;&gt;this&lt;/a&gt;, de forma bem simples expliquei como esse objeto funciona, mas existe uma situação em que o &lt;code&gt;this&lt;/code&gt; pode não se comportar da forma que você espera.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 11:00:00 -0200</pubDate>
      <dc:date>2015-01-02T11:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Como funciona o call e o apply</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/como-funciona-o-call-e-o-apply.html</link>
      <description>&lt;p&gt;No javascript existem 2 métodos mt semelhates, são o &lt;code&gt;call&lt;/code&gt; e o &lt;code&gt;apply&lt;/code&gt;.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 10:00:00 -0200</pubDate>
      <dc:date>2015-01-02T10:00:00-02:00</dc:date>
    </item>
    <item>
      <title>CSS modular com SMACSS</title>
      <link>http://mauriciosoares.co/blog/css/2015/01/02/css-modular-com-smacss.html</link>
      <description>&lt;p&gt;Algo que faz com que muitos back-ends não sejam tao respeitosos com o Front-End é a facilidade com que as coisas fogem do controle (e elas fogem).&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 09:00:00 -0200</pubDate>
      <dc:date>2015-01-02T09:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Herança entre classes</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/heranca-entre-classes.html</link>
      <description>&lt;p&gt;Muitas linguagens de programação já vem com um esquema de &lt;strong&gt;Classes&lt;/strong&gt; e &lt;strong&gt;Super Classes&lt;/strong&gt; pronto, com sua sintaxe já definida, como por exemplo no Ruby quando queremos criar uma herança entre classes:&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 08:00:00 -0200</pubDate>
      <dc:date>2015-01-02T08:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Objetos por referência</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/objetos-por-referencia.html</link>
      <description>&lt;p&gt;Quando trabalhamos com variáveis temos o abto de passar valores para outras variáveis, e assim trata-las, como abaixo:&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 07:00:00 -0200</pubDate>
      <dc:date>2015-01-02T07:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Document Fragments</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/document-fragments.html</link>
      <description>&lt;p&gt;Quando trabalhando diretamente com o DOM você se depara diversas vezes em ter que incluir elementos dinamicos, e existem várias formas de fazer isso, uma delas é usando strings.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 06:00:00 -0200</pubDate>
      <dc:date>2015-01-02T06:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Prototypes!</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/prototypes.html</link>
      <description>&lt;p&gt;Prototype são muito utilizados para criar métodos em funções construtoras, vamos dar o seguinte exemplo.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 05:00:00 -0200</pubDate>
      <dc:date>2015-01-02T05:00:00-02:00</dc:date>
    </item>
    <item>
      <title>this em funções e construtores</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/this-em-funcoes-e-construtores.html</link>
      <description>&lt;p&gt;Um comportamento do Javascript é fazer com que o objeto &lt;code&gt;this&lt;/code&gt; dentro de funções apontem para o objeto &lt;code&gt;window&lt;/code&gt;.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 04:00:00 -0200</pubDate>
      <dc:date>2015-01-02T04:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Cacheando verificações entre browsers</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/cacheando-verificacoes-entre-browsers.html</link>
      <description>&lt;p&gt;Uma técina extremamente interessante que li no livro &lt;a href=&quot;http://novatec.com.br/livros/padroesjavascript/&quot;&gt;Padrões Javascript&lt;/a&gt; do Stoyan Stefanov é chamada de Sniffing.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 03:00:00 -0200</pubDate>
      <dc:date>2015-01-02T03:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Iniciando com this</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/iniciando-com-o-this.html</link>
      <description>&lt;p&gt;Algo que confude muitos desenvolvedores ao iniciar com Javascript é entender o conceito do &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 02:00:00 -0200</pubDate>
      <dc:date>2015-01-02T02:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Closures e suas utilidades</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/closures-e-suas-utilidades.html</link>
      <description>&lt;p&gt;Existem algumas maneiras de evitar que variáveis sejam declaradas no escopo global (ou no objeto &lt;code&gt;window&lt;/code&gt;), uma delas é o uso de closures.&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 01:00:00 -0200</pubDate>
      <dc:date>2015-01-02T01:00:00-02:00</dc:date>
    </item>
    <item>
      <title>Trabalhando com namespaces</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/02/trabalhando-com-namespaces.html</link>
      <description>&lt;p&gt;Como disse em um post anterior, uma má prática é atribuir muitas variáveis ao escopo global, como por exemplo:&lt;/p&gt;
</description>
      <pubDate>Fri, 02 Jan 2015 00:00:00 -0200</pubDate>
      <dc:date>2015-01-02T00:00:00-02:00</dc:date>
    </item>
    <item>
      <title>O Escopo Global</title>
      <link>http://mauriciosoares.co/blog/javascript/2015/01/01/o-escopo-global.html</link>
      <description>&lt;p&gt;Todas as variáveis que você define no javascript que estão fora de funções são chamadas de variaveis globais, pelo fato de elas terem sido declaradas no &lt;strong&gt;Escopo Global&lt;/strong&gt;.&lt;/p&gt;
</description>
      <pubDate>Thu, 01 Jan 2015 23:00:00 -0200</pubDate>
      <dc:date>2015-01-01T23:00:00-02:00</dc:date>
    </item>
    <dc:date>2015-01-02T21:00:00-02:00</dc:date>
  </channel>
</rss>